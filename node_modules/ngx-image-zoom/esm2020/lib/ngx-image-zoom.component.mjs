import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { NgxImageZoomService } from './ngx-image-zoom.service';
import { ClickZoomMode } from './zoom-modes/click-zoom-mode';
import { HoverFreezeZoomMode } from './zoom-modes/hover-freeze-zoom-mode';
import { HoverZoomMode } from './zoom-modes/hover-zoom-mode';
import { ToggleClickZoomMode } from './zoom-modes/toggle-click-zoom-mode';
import { ToggleFreezeZoomMode } from './zoom-modes/toggle-freeze-zoom-mode';
import { ToggleZoomMode } from './zoom-modes/toggle-zoom-mode';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-image-zoom.service";
import * as i2 from "@angular/common";
export class NgxImageZoomComponent {
    constructor(zoomService, renderer) {
        this.zoomService = zoomService;
        this.renderer = renderer;
        this.zoomScroll = new EventEmitter();
        this.zoomPosition = new EventEmitter();
        this.imagesLoaded = new EventEmitter();
        this.lensBorderRadius = 0;
        this.zoomMode = 'hover';
        this.enableScrollZoom = false;
        this.scrollStepSize = 0.1;
        this.circularLens = false;
        this.thumbImageLoaded = false;
        this.subscriptions = [];
        this.eventListeners = [];
        this.zoomModesMap = new Map([
            ['click', ClickZoomMode],
            ['hover-freeze', HoverFreezeZoomMode],
            ['hover', HoverZoomMode],
            ['toggle-click', ToggleClickZoomMode],
            ['toggle-freeze', ToggleFreezeZoomMode],
            ['toggle', ToggleZoomMode],
        ]);
        this.altText = '';
        this.titleText = '';
    }
    set setThumbImage(thumbImage) {
        this.thumbImageLoaded = false;
        this.setIsReady(false);
        this.thumbImage = thumbImage;
    }
    set setFullImage(fullImage) {
        this.zoomService.fullImageLoaded = false;
        this.setIsReady(false);
        this.fullImage = fullImage;
    }
    set setZoomMode(zoomMode) {
        if (NgxImageZoomComponent.validZoomModes.some((m) => m === zoomMode)) {
            this.zoomMode = zoomMode;
        }
    }
    set setMagnification(magnification) {
        this.zoomService.magnification = Number(magnification) || this.zoomService.magnification;
        this.zoomScroll.emit(this.zoomService.magnification);
    }
    set setMinZoomRatio(minZoomRatio) {
        const ratio = Number(minZoomRatio) || this.zoomService.minZoomRatio || this.zoomService.baseRatio || 0;
        this.zoomService.minZoomRatio = Math.max(ratio, this.zoomService.baseRatio || 0);
    }
    set setMaxZoomRatio(maxZoomRatio) {
        this.zoomService.maxZoomRatio = Number(maxZoomRatio) || this.zoomService.maxZoomRatio;
    }
    set setScrollStepSize(stepSize) {
        this.scrollStepSize = Number(stepSize) || this.scrollStepSize;
    }
    set setEnableLens(enable) {
        this.zoomService.enableLens = Boolean(enable);
    }
    set setLensWidth(width) {
        this.zoomService.lensWidth = Number(width) || this.zoomService.lensWidth;
    }
    set setLensHeight(height) {
        this.zoomService.lensHeight = Number(height) || this.zoomService.lensHeight;
    }
    set setCircularLens(enable) {
        this.circularLens = Boolean(enable);
    }
    set setEnableScrollZoom(enable) {
        this.enableScrollZoom = Boolean(enable);
    }
    ngOnInit() {
        // If no full size image is defined, we add the thumbnail as the full size too.
        if (this.fullImage === undefined) {
            this.fullImage = this.thumbImage;
        }
        this.registerServiceSubscriptions();
        // Load zoom mode and set up configuration.
        this.loadZoomMode();
        this.registerEventListeners();
        this.calculateLensBorder();
    }
    ngOnChanges() {
        this.calculateLensBorder();
        this.zoomService.calculateRatioAndOffset();
        this.zoomService.calculateImageAndLensPosition();
    }
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.eventListeners.forEach((destroyFn) => destroyFn());
    }
    registerServiceSubscriptions() {
        this.subscriptions.push(this.zoomService.zoomPosition.subscribe((position) => this.zoomPosition.emit(position)));
    }
    loadZoomMode() {
        const ZoomModeClass = this.zoomModesMap.get(this.zoomMode);
        if (ZoomModeClass) {
            this.zoomInstance = new ZoomModeClass(this.zoomService);
        }
        else {
            console.error(`Unsupported zoom mode: ${this.zoomMode}`);
        }
    }
    registerEventListeners() {
        if (this.zoomInstance) {
            const nativeElement = this.zoomContainer.nativeElement;
            this.eventListeners.push(this.renderer.listen(nativeElement, 'mouseenter', (event) => this.zoomInstance.onMouseEnter(event)), this.renderer.listen(nativeElement, 'mouseleave', (event) => this.zoomInstance.onMouseLeave(event)), this.renderer.listen(nativeElement, 'mousemove', (event) => this.zoomInstance.onMouseMove(event)), this.renderer.listen(nativeElement, 'click', (event) => this.zoomInstance.onClick(event)), 
            // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'
            this.renderer.listen(nativeElement, 'mousewheel', (event) => {
                if (this.zoomInstance.onMouseWheel(event)) {
                    this.onMouseWheel(event);
                }
            }), this.renderer.listen(nativeElement, 'DOMMouseScroll', (event) => {
                if (this.zoomInstance.onMouseWheel(event)) {
                    this.onMouseWheel(event);
                }
            }), this.renderer.listen(nativeElement, 'onmousewheel', (event) => {
                if (this.zoomInstance.onMouseWheel(event)) {
                    this.onMouseWheel(event);
                }
            }));
        }
    }
    /**
     * Template helper methods
     */
    onThumbImageLoaded() {
        // Pass along image sizes to the service.
        this.zoomService.thumbWidth = this.imageThumbnail.nativeElement.width;
        this.zoomService.thumbHeight = this.imageThumbnail.nativeElement.height;
        this.thumbImageLoaded = true;
        this.checkImagesLoaded();
    }
    onFullImageLoaded() {
        // Pass along image sizes to the service.
        this.zoomService.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;
        this.zoomService.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;
        this.zoomService.fullImageLoaded = true;
        this.checkImagesLoaded();
    }
    calculateLensBorder() {
        if (this.zoomService.enableLens) {
            if (this.circularLens) {
                this.lensBorderRadius = this.zoomService.lensWidth / 2;
            }
            else {
                this.lensBorderRadius = 0;
            }
        }
    }
    checkImagesLoaded() {
        this.zoomService.calculateRatioAndOffset();
        if (this.thumbImageLoaded && this.zoomService.fullImageLoaded) {
            this.zoomService.calculateImageAndLensPosition();
            this.setIsReady(true);
        }
    }
    setIsReady(value) {
        this.zoomService.isReady = value;
        this.imagesLoaded.emit(value);
    }
    /**
     * Mouse wheel event
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    onMouseWheel(event) {
        // Don't eat events if scrollZoom or zooming isn't active
        if (!this.enableScrollZoom || !this.zoomService.zoomingEnabled) {
            return;
        }
        event = window.event || event; // old IE
        const direction = Math.max(Math.min(event.wheelDelta || -event.detail, 1), -1);
        if (direction > 0) {
            // up
            this.setMagnification = Math.min(this.zoomService.magnification + this.scrollStepSize, this.zoomService.maxZoomRatio);
        }
        else {
            // down
            this.setMagnification = Math.max(this.zoomService.magnification - this.scrollStepSize, this.zoomService.minZoomRatio);
        }
        this.zoomService.calculateRatio();
        this.zoomService.calculateZoomPosition(event);
        // Prevent scrolling on page.
        event.returnValue = false; // IE
        if (event.preventDefault) {
            event.preventDefault(); // Chrome & FF
        }
    }
}
NgxImageZoomComponent.validZoomModes = [
    'hover',
    'toggle',
    'click',
    'toggle-click',
    'toggle-freeze',
    'hover-freeze',
];
NgxImageZoomComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomComponent, deps: [{ token: i1.NgxImageZoomService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
NgxImageZoomComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.3", type: NgxImageZoomComponent, selector: "lib-ngx-image-zoom", inputs: { setThumbImage: ["thumbImage", "setThumbImage"], setFullImage: ["fullImage", "setFullImage"], setZoomMode: ["zoomMode", "setZoomMode"], setMagnification: ["magnification", "setMagnification"], setMinZoomRatio: ["minZoomRatio", "setMinZoomRatio"], setMaxZoomRatio: ["maxZoomRatio", "setMaxZoomRatio"], setScrollStepSize: ["scrollStepSize", "setScrollStepSize"], setEnableLens: ["enableLens", "setEnableLens"], setLensWidth: ["lensWidth", "setLensWidth"], setLensHeight: ["lensHeight", "setLensHeight"], setCircularLens: ["circularLens", "setCircularLens"], setEnableScrollZoom: ["enableScrollZoom", "setEnableScrollZoom"], altText: "altText", titleText: "titleText" }, outputs: { zoomScroll: "zoomScroll", zoomPosition: "zoomPosition", imagesLoaded: "imagesLoaded" }, providers: [NgxImageZoomService], viewQueries: [{ propertyName: "zoomContainer", first: true, predicate: ["zoomContainer"], descendants: true, static: true }, { propertyName: "imageThumbnail", first: true, predicate: ["imageThumbnail"], descendants: true, static: true }, { propertyName: "fullSizeImage", first: true, predicate: ["fullSizeImage"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div\n    #zoomContainer\n    class=\"ngxImageZoomContainer\"\n    [style.width.px]=\"this.zoomService.thumbWidth\"\n    [style.height.px]=\"this.zoomService.thumbHeight\"\n>\n    <img\n        #imageThumbnail\n        class=\"ngxImageZoomThumbnail\"\n        [alt]=\"altText\"\n        [title]=\"titleText\"\n        [src]=\"thumbImage\"\n        (load)=\"onThumbImageLoaded()\"\n    />\n\n    <div\n        [ngClass]=\"{\n            ngxImageZoomFullContainer: true,\n            ngxImageZoomLensEnabled: this.zoomService.enableLens\n        }\"\n        [style.display]=\"this.zoomService.zoomDisplay\"\n        [style.top.px]=\"this.zoomService.lensTop\"\n        [style.left.px]=\"this.zoomService.lensLeft\"\n        [style.width.px]=\"this.zoomService.lensWidth\"\n        [style.height.px]=\"this.zoomService.lensHeight\"\n        [style.border-radius.px]=\"this.lensBorderRadius\"\n    >\n        <img\n            #fullSizeImage\n            class=\"ngxImageZoomFull\"\n            [alt]=\"altText\"\n            [title]=\"titleText\"\n            [src]=\"fullImage\"\n            (load)=\"onFullImageLoaded()\"\n            [style.display]=\"this.zoomService.zoomDisplay\"\n            [style.top.px]=\"this.zoomService.fullImageTop\"\n            [style.left.px]=\"this.zoomService.fullImageLeft\"\n            [style.width.px]=\"this.zoomService.magnifiedWidth\"\n            [style.height.px]=\"this.zoomService.magnifiedHeight\"\n        />\n    </div>\n</div>\n", styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-ngx-image-zoom', providers: [NgxImageZoomService], template: "<div\n    #zoomContainer\n    class=\"ngxImageZoomContainer\"\n    [style.width.px]=\"this.zoomService.thumbWidth\"\n    [style.height.px]=\"this.zoomService.thumbHeight\"\n>\n    <img\n        #imageThumbnail\n        class=\"ngxImageZoomThumbnail\"\n        [alt]=\"altText\"\n        [title]=\"titleText\"\n        [src]=\"thumbImage\"\n        (load)=\"onThumbImageLoaded()\"\n    />\n\n    <div\n        [ngClass]=\"{\n            ngxImageZoomFullContainer: true,\n            ngxImageZoomLensEnabled: this.zoomService.enableLens\n        }\"\n        [style.display]=\"this.zoomService.zoomDisplay\"\n        [style.top.px]=\"this.zoomService.lensTop\"\n        [style.left.px]=\"this.zoomService.lensLeft\"\n        [style.width.px]=\"this.zoomService.lensWidth\"\n        [style.height.px]=\"this.zoomService.lensHeight\"\n        [style.border-radius.px]=\"this.lensBorderRadius\"\n    >\n        <img\n            #fullSizeImage\n            class=\"ngxImageZoomFull\"\n            [alt]=\"altText\"\n            [title]=\"titleText\"\n            [src]=\"fullImage\"\n            (load)=\"onFullImageLoaded()\"\n            [style.display]=\"this.zoomService.zoomDisplay\"\n            [style.top.px]=\"this.zoomService.fullImageTop\"\n            [style.left.px]=\"this.zoomService.fullImageLeft\"\n            [style.width.px]=\"this.zoomService.magnifiedWidth\"\n            [style.height.px]=\"this.zoomService.magnifiedHeight\"\n        />\n    </div>\n</div>\n", styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NgxImageZoomService }, { type: i0.Renderer2 }]; }, propDecorators: { zoomContainer: [{
                type: ViewChild,
                args: ['zoomContainer', { static: true }]
            }], imageThumbnail: [{
                type: ViewChild,
                args: ['imageThumbnail', { static: true }]
            }], fullSizeImage: [{
                type: ViewChild,
                args: ['fullSizeImage', { static: true }]
            }], zoomScroll: [{
                type: Output
            }], zoomPosition: [{
                type: Output
            }], imagesLoaded: [{
                type: Output
            }], setThumbImage: [{
                type: Input,
                args: ['thumbImage']
            }], setFullImage: [{
                type: Input,
                args: ['fullImage']
            }], setZoomMode: [{
                type: Input,
                args: ['zoomMode']
            }], setMagnification: [{
                type: Input,
                args: ['magnification']
            }], setMinZoomRatio: [{
                type: Input,
                args: ['minZoomRatio']
            }], setMaxZoomRatio: [{
                type: Input,
                args: ['maxZoomRatio']
            }], setScrollStepSize: [{
                type: Input,
                args: ['scrollStepSize']
            }], setEnableLens: [{
                type: Input,
                args: ['enableLens']
            }], setLensWidth: [{
                type: Input,
                args: ['lensWidth']
            }], setLensHeight: [{
                type: Input,
                args: ['lensHeight']
            }], setCircularLens: [{
                type: Input,
                args: ['circularLens']
            }], setEnableScrollZoom: [{
                type: Input,
                args: ['enableScrollZoom']
            }], altText: [{
                type: Input
            }], titleText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,