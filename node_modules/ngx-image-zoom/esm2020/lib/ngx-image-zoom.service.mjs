import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxImageZoomService {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.zoomDisplay = 'none';
        this.thumbWidth = 0;
        this.thumbHeight = 0;
        this.fullImageTop = 0;
        this.fullImageLeft = 0;
        this.lensWidth = 100;
        this.lensHeight = 100;
        this.lensTop = 0;
        this.lensLeft = 0;
        this.magnifiedWidth = 0;
        this.magnifiedHeight = 0;
        this.zoomPosition = new BehaviorSubject(null);
        this.zoomingEnabled = false;
        this.isReady = false;
        this.enableLens = false;
        this.minZoomRatio = 1;
        this.maxZoomRatio = 2;
        this.magnification = 1;
        this.fullWidth = 0;
        this.fullHeight = 0;
        this.xRatio = 0;
        this.yRatio = 0;
        this.latestMouseLeft = -1;
        this.latestMouseTop = -1;
    }
    zoomOn(event) {
        if (this.isReady) {
            this.zoomingEnabled = true;
            this.calculateRatioAndOffset();
            this.zoomDisplay = 'block';
            this.calculateZoomPosition(event);
            this.changeDetectorRef.markForCheck();
        }
    }
    zoomOff() {
        this.zoomingEnabled = false;
        this.zoomDisplay = 'none';
        this.changeDetectorRef.markForCheck();
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
    }
    calculateRatioAndOffset() {
        // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb
        if (!this.enableLens) {
            this.lensWidth = this.thumbWidth;
            this.lensHeight = this.thumbHeight;
            this.lensLeft = 0;
            this.lensTop = 0;
        }
        if (this.fullImageLoaded) {
            this.baseRatio = Math.max(this.thumbWidth / this.fullWidth, this.thumbHeight / this.fullHeight);
            // Don't allow zooming to smaller than thumbnail size
            this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);
            this.calculateRatio();
        }
    }
    calculateRatio() {
        this.magnifiedWidth = this.fullWidth * this.magnification;
        this.magnifiedHeight = this.fullHeight * this.magnification;
        this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;
        this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;
    }
    calculateZoomPosition(event) {
        const newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);
        const newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);
        this.setZoomPosition(newLeft, newTop);
        this.calculateImageAndLensPosition();
        this.changeDetectorRef.markForCheck();
    }
    calculateImageAndLensPosition() {
        let lensLeftMod = 0;
        let lensTopMod = 0;
        if (this.enableLens && this.latestMouseLeft > 0) {
            lensLeftMod = this.latestMouseLeft - this.lensWidth / 2;
            lensTopMod = this.latestMouseTop - this.lensHeight / 2;
            this.lensLeft = lensLeftMod;
            this.lensTop = lensTopMod;
        }
        this.fullImageLeft = this.latestMouseLeft * -this.xRatio - lensLeftMod;
        this.fullImageTop = this.latestMouseTop * -this.yRatio - lensTopMod;
    }
    setZoomPosition(left, top) {
        this.latestMouseLeft = Number(left) || this.latestMouseLeft;
        this.latestMouseTop = Number(top) || this.latestMouseTop;
        const newPosition = {
            x: this.latestMouseLeft,
            y: this.latestMouseTop,
        };
        this.zoomPosition.next(newPosition);
    }
}
NgxImageZoomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomService, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Injectable });
NgxImageZoomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.3", ngImport: i0, type: NgxImageZoomService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,